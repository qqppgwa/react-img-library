{"version":3,"sources":["components/ImageCell/ImageCell.module.css","pages/index/index.module.css","pages/favorites.jsx","components/ImageCell/ImageCell.jsx","assets/api.js","pages/index/index.jsx","App.jsx","serviceWorker.js","store/index.js","index.js"],"names":["module","exports","Favorites","React","Component","ImageCell","props","console","log","state","islike","checkLike","list","id","className","styles","container","this","index","onClick","liked","bind","src","images","fixed_height_downsampled","url","alt","expires","Date","setDate","now","likes","cookie","load","length","indexOf","find","e","splice","save","path","setState","addLike","push","loadAll","connect","dispatch","likeNum","type","payload","keyWordSearch","axios","create","baseURL","SearchPage","keyword","status","s","i","key","keying","changeStatus","imgList","v","l","InputArea","placeholder","onChange","onKeyPress","search","value","target","data","nativeEvent","keyCode","query","limit","get","then","res","catch","err","exact","to","component","favorites","Boolean","window","location","hostname","match","init","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47fc4513.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ImageCell_container__1_5Sa\",\"liked\":\"ImageCell_liked__22-r5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgList\":\"index_imgList__3uyPH\"};","import React from 'react'\r\n\r\nclass Favorites extends React.Component {\r\n  render() {\r\n    return <p>bb</p>\r\n  }\r\n}\r\nexport default Favorites\r\n","import React from 'react'\r\nimport styles from './ImageCell.module.css'\r\nimport cookie from 'react-cookies'\r\nimport { connect } from 'react-redux'\r\nclass ImageCell extends React.Component {\r\n  constructor(props) {\r\n    super()\r\n    // console.log(cookie)\r\n    console.log(props)\r\n    this.state = {\r\n      islike: this.checkLike(props.list.id)\r\n    }\r\n  }\r\n  render() {\r\n    // let photo = this.props.list.images.fixed_height_downsampled\r\n    // console.log(document.getElementsByClassName('figure')[0])\r\n    return (\r\n      <figure className={styles.container + ` figure${this.props.index}`} onClick={this.liked.bind(this)}>\r\n        <img src={this.props.list.images.fixed_height_downsampled.url} alt=\"\" />\r\n        <div className={this.state.islike ? styles.liked : ''}></div>\r\n      </figure>\r\n    )\r\n  }\r\n  liked() {\r\n    const expires = new Date()\r\n    expires.setDate(Date.now() + 1000 * 60 * 60 * 24 * 14)\r\n    let likes = cookie.load('likeList') ? cookie.load('likeList') : []\r\n    // let likes = this.checkLike(this.props.list.id)\r\n    if (!this.state.islike || likes.length === 0) {\r\n      likes.push(this.props.list.id)\r\n      cookie.save('likeList', likes, {\r\n        path: '/',\r\n        expires\r\n      })\r\n      this.setState({ islike: true })\r\n      this.props.addLike(likes.length)\r\n    } else if (this.state.islike) {\r\n      let index = likes.indexOf(likes.find(e => e === this.props.list.id))\r\n      likes.splice(index, 1)\r\n      cookie.save('likeList', likes, {\r\n        path: '/',\r\n        expires\r\n      })\r\n      this.setState({ islike: false })\r\n      this.props.addLike(likes.length)\r\n    }\r\n\r\n    console.log(cookie.loadAll())\r\n\r\n    // this.props.list.images.id\r\n  }\r\n  checkLike(id) {\r\n    if (cookie.load('likeList')) {\r\n      return cookie.load('likeList').find(e => e === id) ? true : false\r\n    }\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    name: state.name\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addLike: likeNum => {\r\n      console.log(likeNum)\r\n      return dispatch({\r\n        type: 'ADD_Like',\r\n        payload: {\r\n          likeNum: likeNum\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\nexport default connect(null, mapDispatchToProps)(ImageCell)\r\n\r\n// style={{ left: `calc((22vw - ${photo.width}px))` }}\r\n","import axios from 'axios';\r\nconst apiKey = 'IGLOYrMAV8KRjzGzj6vvF3dGx2WlASHZ'\r\nconst keyWordSearch = axios.create({\r\n    baseURL: 'https://api.giphy.com/v1/gifs'\r\n});\r\n// const searchPrefix='https://api.giphy.com/v1/gifs/search?api_key=IGLOYrMAV8KRjzGzj6vvF3dGx2WlASHZ&';\r\nexport const apiSearch = data => keyWordSearch.get(`/search?api_key=${apiKey}&q=${data.query}&limit=${data.limit}`);","import React from 'react'\r\nimport ImageCell from '../../components/ImageCell/ImageCell.jsx'\r\nimport { apiSearch } from '../../assets/api'\r\nimport styles from './index.module.css'\r\nclass SearchPage extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      keyword: '',\r\n      status: '',\r\n      list: []\r\n    }\r\n  }\r\n  render() {\r\n    let s\r\n    console.log(this.state.list)\r\n    if (this.state.status === 'loading') {\r\n      s = <p>loading</p>\r\n    } else if (this.state.list.length > 0) {\r\n      s = []\r\n      for (let i = 0; i < this.state.list.length; i++) {\r\n        s.push(<ImageCell list={this.state.list[i]} key={i} index={i} />)\r\n      }\r\n      console.log(s)\r\n    } else if (this.state.status === 'none') {\r\n      s = <p>no result</p>\r\n    } else {\r\n      s = <p>error</p>\r\n    }\r\n    return (\r\n      <div>\r\n        <InputArea keying={this.keying.bind(this)} changeStatus={this.changeStatus.bind(this)} list={this.list.bind(this)} state={this.state} />\r\n        <div className={styles.imgList}>{this.state.status === '' ? null : s}</div>\r\n      </div>\r\n    )\r\n  }\r\n  keying(v) {\r\n    this.setState({ keyword: v })\r\n  }\r\n  changeStatus(s) {\r\n    this.setState({ status: s })\r\n    console.log(this.state)\r\n  }\r\n  list(l) {\r\n    this.setState({ list: l })\r\n    console.log(this.state)\r\n  }\r\n}\r\n// class Results extends React.Component {}\r\nclass InputArea extends React.Component {\r\n  render() {\r\n    return <input type=\"text\" placeholder=\"Start searching for images!\" onChange={this.keying.bind(this)} onKeyPress={this.search.bind(this)} value={this.props.state.keyword} />\r\n  }\r\n  keying(e) {\r\n    console.log(e.target.value)\r\n    this.props.keying(e.target.value)\r\n  }\r\n  search(e) {\r\n    if (e.nativeEvent.keyCode === 13) {\r\n      this.props.changeStatus('loading')\r\n      // this.setState({ status: 'loading' })\r\n      apiSearch({\r\n        query: this.props.state.keyword,\r\n        limit: '8'\r\n      })\r\n        .then(res => {\r\n          console.log(res)\r\n          if (res.data.data.length > 0) {\r\n            this.props.changeStatus('showlist')\r\n            this.props.list(res.data.data)\r\n            // this.setState({ status: 'showList' })\r\n          } else {\r\n            this.props.changeStatus('none')\r\n            // this.setState({ status: 'null' })\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err)\r\n          this.props.changeStatus('error')\r\n          // this.setState({ status: 'error' })\r\n        })\r\n    }\r\n  }\r\n}\r\nexport default SearchPage\r\n","import React from 'react'\nimport './App.css'\nimport { HashRouter, Route, NavLink, Switch } from 'react-router-dom'\nimport favorites from './pages/favorites.jsx'\nimport index from './pages/index/index.jsx'\nimport cookie from 'react-cookies'\nimport { connect } from 'react-redux'\n\nconst App = props => {\n  let num = cookie.load('likeList') ? cookie.load('likeList').length : 0\n  return (\n    <HashRouter>\n      <nav>\n        <h1>\n          Galler<span>easy</span>\n        </h1>\n        <NavLink exact to={'/'}>\n          search\n        </NavLink>\n        <NavLink exact to={'/favourites'}>\n          favourites (<span>{props.likeNum}</span>)\n        </NavLink>\n      </nav>\n      <Switch>\n        <Route path=\"/favourites\" component={favorites} />\n        <Route path=\"/\" component={index} />\n      </Switch>\n    </HashRouter>\n  )\n}\nconst mapStateToProps = ({ likeNum }) => {\n  console.log(likeNum)\n  return {\n    likeNum: likeNum\n  }\n}\n//\nexport default connect(mapStateToProps, null)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    createStore\r\n} from 'redux'\r\nimport cookie from 'react-cookies'\r\n\r\n// const expires = new Date()\r\n// expires.setDate(Date.now() + 1000 * 60 * 60 * 24 * 14)\r\n// cookie.save(\r\n//     'userId',\r\n//     '1234', {\r\n//         path: '/',\r\n//         expires,\r\n\r\n\r\n//     }\r\n// )\r\n//reducer\r\n\r\nconst init = {\r\n    likeNum: cookie.load('likeList') ? cookie.load('likeList').length : 0\r\n}\r\n// console.log(document.cookie)\r\nconsole.log(cookie.loadAll())\r\n\r\nconst reducers = (state = init, {\r\n    type,\r\n    payload\r\n}) => {\r\n    console.log(type)\r\n    switch (type) {\r\n        case 'ADD_Like':\r\n            return {\r\n                likeNum: payload.likeNum\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\n//store\r\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\nimport './index.css'\nimport App from './App.jsx'\nimport * as serviceWorker from './serviceWorker'\nimport {\n    Provider\n} from 'react-redux'\nimport store from './store/index';\n\nReactDOM.render( < Provider store = {\n            store\n        } >\n        <\n        App / >\n        <\n        /Provider>, document.getElementById('root'))\n\n        // If you want your app to work offline and load faster, you can change\n        // unregister() to register() below. Note this comes with some pitfalls.\n        // Learn more about service workers: https://bit.ly/CRA-PWA\n        serviceWorker.unregister()"],"sourceRoot":""}